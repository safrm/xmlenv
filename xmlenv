#!/bin/sh
#multiplatformal/distribution system dumping and comparation - https://github.com/safrm/xmlenv
#author:  Miroslav Safr <miroslav.safr@gmail.com>
#script to dump installed packages to xml file
#tested with tubuntu 10.10, Fedora 9 (CentOS)

#TODO
#yum -remove .i386 from package name
#aptitude - remove ubuntu packaging tag from version 

VERSION=1.0.2
XML_VERSIONS_FILE=./pkgversions.xml
XML_DESCRIPTIONS_FILE=./pkgdescriptions.xml
XML_HEADER_START="<?xml version=\"1.0\" encoding=\"utf-8\"?>"
XML_HEADER="<system "
PREFFERED_MANAGER=""           #dpkg
MANAGERS="managers: "          #status
RIGHT_NOW=$(date +"%x %r %Z")
COMMENT_FIELD=""

Init() {
#header - os type --------------------------------------------------------
if [ -r `which uname 2>/dev/null` ]; then
        OSTYPE=`uname`
        log "type=$OSTYPE";
fi
if [ "x$OSTYPE" = "x" ]
then
    echo "No system name and type detected (uname)"
else
XML_HEADER="$XML_HEADER type=\"$OSTYPE\" "
fi

#header - system name --------------------------------------------------- 
if [ -r `which lsb_release 2>/dev/null` ]; then
#if $(type -P lsb_release > /dev/null); then \
	SYSTEMNAME=`lsb_release -d | sed 's/^Description:[[:space:]]//g'`
    log "systemname=$SYSTEMNAME";
fi
if [ "x$SYSTEMNAME" = "x" ]
then
    echo "No system name detected (lsb_release)"
else
XML_HEADER="$XML_HEADER systemname=\"$SYSTEMNAME\" "
fi

#header - os info + arch separately --------------------------------------
if [ -r `which uname 2>/dev/null` ]; then
	OSINFO=`uname -a `
	OSARCH=`uname -m`
    log "arch=$OSARCH";
    log "info=$OSINFO";
fi
if [ "x$OSINFO" = "x" ]
then
    echo "No system name and type detected (uname)"
else
	XML_HEADER="$XML_HEADER arch=\"$OSARCH\" info=\"$OSINFO\" "
fi

#header - computername ----------------------------------------------------
if [ -r `which hostname 2>/dev/null` ]; then
	HOSTNAME=`hostname -f`
        log "hostname=$HOSTNAME";
fi
if [ "x$HOSTNAME" = "x" ]
then
    echo "No system name detected (hostname)"
else
XML_HEADER="$XML_HEADER hostname=\"$HOSTNAME\""
fi

#header - username ----------------------------------------------------
if $(type -P whoami > /dev/null); then \
	USERNAME=`whoami`
        log "username=$USERNAME";
fi
if [ "x$USERNAME" = "x" ]
then
    echo "No username detected (whoami)"
else
XML_HEADER="$XML_HEADER username=\"$USERNAME\""
fi

#header - preffered method ----------------------------------------------------
DPKGEXEC=`which dpkg 2>/dev/null`
if [ "x$DPKGEXEC" != "x"  ]; then
        MANAGERS=$MANAGERS"dpkg:OK "
        PREFFERED_MANAGER="dpkg"
else
        MANAGERS=$MANAGERS"dpkg:failed "
fi
APTITUDEEXEC=`which aptitude 2>/dev/null`
if [ "x$APTITUDEEXEC" != "x"  ]; then
        MANAGERS=$MANAGERS"aptitude:OK "
        PREFFERED_MANAGER="aptitude"
else
        MANAGERS=$MANAGERS"aptitude:failed "
fi
YUMEXEC=`which yum 2>/dev/null`
if [ "x$YUMEXEC" != "x"  ]; then
        MANAGERS=$MANAGERS"yum:OK "
        PREFFERED_MANAGER="yum"
else
        MANAGERS=$MANAGERS"yum:failed "
fi

if [ "x$PREFFERED_MANAGER" = "x" ]; then
	echo "not found supported package manager"
        exit 1
fi
MANAGERS=$MANAGERS"preffered=$PREFFERED_MANAGER"

if [ $cmd_show = 1 -a $group_sysinfo = 1 ]; then
        echo "type=$OSTYPE"
        echo "systemname=$SYSTEMNAME"
        echo "arch=$OSARCH"
        echo "info=$OSINFO"
        echo "hostname=$HOSTNAME"
        echo "username=$USERNAME"
	echo $MANAGERS
        echo "commnet=$COMMENT_FIELD"
fi
}


PackagesRequests() {
XML_HEADER="$XML_HEADER pkgmanager=\"$PREFFERED_MANAGER\" xmlenv=\"$VERSION\" comment=\"$COMMENT_FIELD\">"
if [ "$cmd_dump" = "1" ]; then
	echo $XML_HEADER_START > $XML_VERSIONS_FILE
	echo $XML_HEADER >> $XML_VERSIONS_FILE
fi
	if [ $group_envvar = 1 ]; then

			if [ $cmd_show = 1 ]; then
				env | tr -d \"\'\|\%\\  | sort -V -s -u |  awk -F= ' { print $1 "=" $2 }'
			fi
			if [ $cmd_dump = 1 ]; then
				echo "<envvars>" >> $XML_VERSIONS_FILE
				env | tr -d \"\'\|\%\\  | sort -V -s -u | awk -F= ' { print "  <envvar name=\""$1"\" value=\""$2"\" />" }' >>  $XML_VERSIONS_FILE
				echo "</envvars>" >> $XML_VERSIONS_FILE
			fi
	fi

#packages ------------------------------------------------------------------------------
if [ "x$PREFFERED_MANAGER" = "xaptitude" ]; then
        #curently only for apt
	if [ "$cmd_dump" = "1" ]; then
		if [ "$group_descr" = "1" ]; then
			echo $XML_HEADER_START > $XML_DESCRIPTIONS_FILE
			echo $XML_HEADER >> $XML_DESCRIPTIONS_FILE
			aptitude -F '%p %m %d' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print "  <package name=\""$1"\" mainteiner=\"" $2 "\" description=\""  substr($0, index($0,$3)) "\" />" }' >> $XML_DESCRIPTIONS_FILE		
			echo "</system>" >> $XML_DESCRIPTIONS_FILE
		fi

		if [ "$group_pkgver" = "1" ]; then
			echo "<packages>" >> $XML_VERSIONS_FILE	
			aptitude -F '%p %v %p' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print "  <package name=\""$1"\" version=\""$2"\" fullpackagename=\""$3"\"/>" }' >>  $XML_VERSIONS_FILE	
			echo "</packages>" >> $XML_VERSIONS_FILE	
		elif [ "$group_pkglist" = "1" ]; then #simple list
			echo "<packages>" >> $XML_VERSIONS_FILE	
			aptitude -F '%p' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print "  <package name=\""$1"\"/>" }' >>  $XML_VERSIONS_FILE	
			echo "</packages>" >> $XML_VERSIONS_FILE	
		fi
	fi	

	if [ "$cmd_show" = "1" ]; then
		if [ "$group_pkgver" = "1" ]; then
			aptitude -F '%p %v %p' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print $1 " " $2 }'
		elif [ "$group_pkglist" = "1" ]; then #simple list
			aptitude -F '%p' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print $1}'
                fi
		if [ "$group_pkgcount" = "1" ]; then
			COUNT=`aptitude -F '%p' search '~i' --disable-columns| wc -l`
			echo "installed $COUNT packages"
		fi
	fi
fi
if [ "x$PREFFERED_MANAGER" = "xdpkg" ]; then
	if [ "$cmd_dump" = "1" ]; then
		if [ "$group_descr" = "1" ]; then
			echo $XML_HEADER_START > $XML_DESCRIPTIONS_FILE
			echo $XML_HEADER >> $XML_DESCRIPTIONS_FILE
			dpkg-query -W -f='${PackageSpec} ${Description}\n' | tr \" \' | tr -d \&\<\> | awk '/^ii/ {print "  <package name=\""$2"\" description=\""  substr($0, index($0,$4)) "\" />"  }' >> $XML_DESCRIPTIONS_FILE
			echo "</system>" >> $XML_DESCRIPTIONS_FILE
		fi
		if [ "$group_pkgver" = "1" ]; then
			echo "<packages>" >> $XML_VERSIONS_FILE	
			dpkg -l | awk '/^ii/ {print "\t<package name=\"" $2 "\" version=\""$3 "\" />"}' >>  $XML_VERSIONS_FILE
			echo "</packages>" >> $XML_VERSIONS_FILE	
		elif [ "$group_pkglist" = "1" ]; then #simple list
			echo "<packages>" >> $XML_VERSIONS_FILE	
			dpkg -l | awk '/^ii/ {print "\t<package name=\"" $2 "\" />"}' >>  $XML_VERSIONS_FILE	
			echo "</packages>" >> $XML_VERSIONS_FILE	
		fi
 	fi
	if [ "$cmd_show" = "1" ]; then
		if [ "$group_pkgver" = "1" ]; then
			dpkg -l | awk '/^ii/ {print $2, $3}'
		elif [ "$group_pkglist" = "1" ]; then #simple list
			dpkg -l | awk '/^ii/ {print $2}'
                fi
		if [ "$group_pkgcount" = "1" ]; then
			COUNT=`dpkg -l | awk '/^ii/ {print $2}'| wc -l`
 			echo "installed $COUNT packages"
		fi
	fi
fi

#rpm -qa	
#rpm -qa | while read package; do rpm -qi $package | head -n 1 | while read a b c; do echo -n "$c "; done; rpm -qi $package | head -n 2 | tail -n 1 | while read a b c; do echo $c; done; done
#yum 
if [ "x$PREFFERED_MANAGER" = "xyum" ]; then
	#packages
	if [ "$cmd_dump" = "1" ]; then
		echo "<packages>" >> $XML_VERSIONS_FILE	
		yum list installed | tr \" \' | tr -d \&\<\> | awk '{print "  <package name=\"" $1 "\" version=\""$2 "\" />" }' >>  $XML_VERSIONS_FILE	
        	echo "</packages>" >> $XML_VERSIONS_FILE	
	fi
	if [ "$cmd_show" = "1" ]; then
             yum list installed | tr \" \' | tr -d \&\<\> | awk '{print "$1 " "$2" }'
        fi

	if [ "$group_pkgcount" = "1" ]; then
		COUNT=`yum list installed| wc -l`
		echo "installed $COUNT packages"
	fi
fi

#footer
if [ "$cmd_dump" = "1" ]; then
	echo "</system>" >> $XML_VERSIONS_FILE
fi
}


log() {
    if [ $_V -eq 1 ]; then
        echo "V: $@"
    fi
}

usage() {
    echo "xmlshow ${VERSION}"
    echo " commands: "
    echo " help - prints this help"
    echo " show - shows requested info"
    echo " dump - dumps requsted info"
    echo " compare <local or http base.xml> - compares requested info "
    echo "    groups: all or empty = default"
    echo "    default"
    echo "               pkglist  installed  package list (s,d)"
    echo "       *       pkgver  installed package versions (s,d)"
    echo "               pkgver gcc   package versions of one package (s,d)"
    echo "       *       env  environment variables according file (s,d)"
    echo "       *       sys   system info (s,d)"
    echo "               pkgdescr  packages with description (d)"
    echo "       *       pkgcount  number of installed packages (s)"
    echo "               -f --full  generates report with equal and current unique (additional) packages (c)"
    echo "               -o --output <html-file> write output to different file (c)"
    echo "               -b --base <xml-file> select base comparation file (c)"
    echo "               -v --verbose  get more output (s,d,c)"
    echo "               -ec --exitcode  comparation returns 1 if there are some packages missing (c)"
    echo "               -c --comment \"example comment\" stores comment to dump (s,d,c)"
#    echo "               pkgver gcc>=3.0  manual comparation for one version (c)"
#    echo "               env:HOME=/home/user  environment variables equal query  (c)"
#    echo "               env:HOME*/home/user  environment variables contains query (c)"
#    echo "               sys:system=linux    system specifications equal query (c)"
#    echo "               sys:release>=\"fedora 9\"  system specifications equal or higher query (c)"

}

interactive=
base_xml=`pwd`/base.xml
output_html=`pwd`/result.html
full_html_report=false
exit_codes=false
cmd_show=0
cmd_dump=0
cmd_compare=0
group_pkglist=0
group_pkgver=0
group_sysinfo=0
group_descr=0
group_envvar=0
group_pkgcount=0
_V=0  				#verbose

while [ "$1" != "" ]; do
    case $1 in
        show )                  cmd_show=1 ;;
        dump )                  cmd_dump=1 ;;
        compare )               cmd_compare=1 ;;
        all )                   group_pkglist=1
                				group_pkgver=1
		                        group_sysinfo=1
                				group_envvar=1 ;;
        list | pkglist )        group_pkglist=1 ;;
        versions | pkgver )     group_pkgver=1 ;;
        sysinfo | system | sys )         group_sysinfo=1 ;;
        descr | pkgdescr | descriptions )  group_descr=1 ;;   #scpecial usage
        env   | envvar )        group_envvar=1 ;;
        count | pkgcount )      group_pkgcount=1 ;;
        -b    | --base )        shift  
                                base_xml=`readlink -f $1`
                                if [ ! -f $base_xml ]
                                then
                                    echo "Base file $base_xml does not exists" 
                                    exit 1
                                fi
                                ;;
        -o    | --output )      shift  
                                output_html=$1;;
        -f    | --full )        full_html_report=true;;
        -ec   | --exitcode )    exit_codes=true;;
        -c    | --comment )     shift  
                                COMMENT_FIELD=$1;;
        help  | -h | --help )   usage exit ;;
        -v    | --verbose )     _V=1 ;;
        * )                     usage
                                exit 1
    esac
    shift
done
#cmd_run=$(($cmd_show+$cmd_dump))
#xmlver show (means all)
if [ "$group_pkglist" = "0" -a "$group_pkgver" = "0" -a "$group_sysinfo" = "0" -a "$group_descr" = "0"  -a "$group_envvar" = "0" -a "$group_pkgcount" = "0"  ]; then
	group_pkglist=1
	group_pkgver=1
	group_sysinfo=1
        group_envvar=1
	group_pkgcount=1
fi
log "show=$cmd_show dump=$cmd_dump compare=$cmd_compare"
if [ $cmd_show = 1 -o  $cmd_dump = 1 ]; then
	log "running show or dump";
	Init
	if [ $group_pkglist = 1 -o $group_pkgver = 1 -o $group_envvar = 1 -o $group_pkgcount = 1 -o $group_descr = 1 ]; then
		PackagesRequests
	fi
elif [ $cmd_compare = 1  ]; then 
    #simple compare(base.xml) or dump+compare?
    log "running compare";
    cmd_dump=1 ; group_pkgver=1 ; group_sysinfo=1 ;
    Init
    PackagesRequests
    saxon-xslt ./pkgversions.xml /usr/share/xmlenv/compare-pkgs.xsl  basefile=$base_xml fullreport=$full_html_report > $output_html
    if [ "$?" != "0" ]; then
	echo "problem in comparation - maybe libsaxon-java is not installed or you don't have permissions."
        exit 1
    else 
	#0 = found not installed package
	grep "not installed" -q $output_html  
	if [ "$?" = "0" -a "$exit_codes" = "true" ]; then
		echo "some packages are not installed check `readlink -f $output_html`"	
	    	exit 1
        else
		echo "comparation result written to `readlink -f $output_html`"
        fi
    fi
else
   	echo "wrong parameters";
        usage
fi

