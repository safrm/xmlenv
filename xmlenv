#!/bin/sh
#multiplatformal/distribution system environments dumping and comparation - http://safrm.net/projects/xmlenv
#author:  Miroslav Safr <miroslav.safr@gmail.com>
VERSION=NA
VERSION_DATE=NA

#support color escape characters on different terminals
alias echo="/bin/echo -e"
BASENAME=`basename $0`
usage() {
    echo "$BASENAME ${VERSION} - dump and compare system environments by xml"
    echo " http://safrm.net/projects/xmlenv/"
    echo "Usage:$BASENAME COMMANDS [GROUPS] ... [OPTIONS] "
    echo " COMMANDS: "
    echo "   help, -h, --help ................ prints this help"
    echo "   -V, --version ................... prints only version number"
    echo "   show ............................ shows requested info (s)"
    echo "   dump ............................ dumps requsted info (d)"
    echo "   backup .......................... dumps state with timestamp format"
    echo "   compare-report .................. compares 2 states/files and creates html report (c)"
    echo "   compare-installed-pkgs .......... prints list of added packages from base state (c)"
    echo "   compare-removed-pkgs ............ prints list of removed packages from base state (c)"
    echo "   check ........................... checks system parameters given by commandline comma separated array (ch)"
    echo " GROUPS(s,d,ch): all or empty = default"
    echo "    default"
    echo "               pkglist ...... installed  package list (s,d,ch)"
    echo "       *       pkgver ....... installed package versions (s,d)"
    echo "               pkgver gcc ... package versions of one package (s,d)"
    echo "       *       env .......... environment variables according file (s,d)"
    echo "       *       hw ........... HW info (s,d)"
    echo "       *       sys .......... system info (s,d)"
    echo "               pkgdescr ..... packages with description (d)"
    echo "       *       pkgcount ..... number of installed packages (s)"
    echo " OPTIONS:"
    echo "  -f,  --full ......................... generates report with equal and current unique (additional) packages (c)"
    echo "  -r,  --report <html-file> ........... writes output to different file (default report.html)  (c)"
    echo "  -b,  --base <xml-file> .............. selects base comparation file (local or http base.xml) (c)"
    echo "  -x,  --xml <xml-file> ............... change main input/output xmlfile name (default pkgversions.xml) (s,d,c)"
    echo "  -od, --output-descriptions <xml-file> change output xmlfile name fro pkgdescr (default pkgdescriptions.xml) (d)"
    echo "  -dd, --dont-dump .................... used for comparing two dumps -b <first-xml> -ox <second-xml> (c)"
    echo "  -v,  --verbose ...................... gets more output (s,d,c)"
    echo "  -ec, --exitcode ..................... comparation returns 1 if there are some packages missing (c)"
    echo "  -c,  --comment \"example comment\" .. stores comment to dump (s,d,c)"
#    echo "               pkgver gcc>=3.0  manual comparation for one version (c)"
#    echo "               env:HOME=/home/user  environment variables equal query  (c)"
#    echo "               env:HOME*/home/user  environment variables contains query (c)"
#    echo "               sys:system=linux    system specifications equal query (c)"
#    echo "               sys:release>=\"fedora 9\"  system specifications equal or higher query (c)"
    echo " "
}
commadExists() { type $1 >/dev/null 2>&1 ; }

XMLENV_BACKUP_DIR=~/.xmlenv
XML_VERSIONS_FILE=./pkgversions.xml
XML_DESCRIPTIONS_FILE=./pkgdescriptions.xml
XML_HEADER_START="<?xml version=\"1.0\" encoding=\"utf-8\"?>"
XML_HEADER="<system "
PREFFERED_MANAGER=""           #dpkg
MANAGERS="managers: "          #status
TS=$( date +"%Y%m%d_%H%M" )
COMMENT_FIELD=""

Init() {
#header - os type --------------------------------------------------------
if commadExists uname ; then
        OSTYPE=`uname`
        log "type=$OSTYPE"
fi
if [ "x$OSTYPE" = "x" ]; then
    echo "No system name and type detected (uname)"
else
 XML_HEADER="$XML_HEADER type=\"$OSTYPE\" "
fi

#header - system name ---------------------------------------------------
if commadExists lsb_release ; then
    SYSTEMNAME=`lsb_release -d | sed 's/^Description:[[:space:]]//g'`
    log "systemname=$SYSTEMNAME";
fi
if [ "x$SYSTEMNAME" = "x" ]; then
    echo "No system name detected (lsb_release)"
else
	XML_HEADER="$XML_HEADER systemname=\"$SYSTEMNAME\" "
fi

#header - os info + arch separately --------------------------------------
if commadExists uname ; then
	OSINFO=`uname -a `
	OSARCH=`uname -m`
    log "arch=$OSARCH"
    log "info=$OSINFO"
fi
if [ "x$OSINFO" = "x" ]; then
    echo "No system name and type detected (uname)"
else
	XML_HEADER="$XML_HEADER arch=\"$OSARCH\" info=\"$OSINFO\" "
fi

#header - computername ----------------------------------------------------
if commadExists hostname ; then
	HOSTNAME=`hostname -f`
    log "hostname=$HOSTNAME"
fi
if [ "x$HOSTNAME" = "x" ]; then
    echo "No system name detected (hostname)"
else
	XML_HEADER="$XML_HEADER hostname=\"$HOSTNAME\""
fi

#header - username ----------------------------------------------------
if commadExists whoami ; then
	USERNAME=`whoami`
    log "username=$USERNAME"
fi
if [ "x$USERNAME" = "x" ]; then
    echo "No username detected (whoami)"
else
	XML_HEADER="$XML_HEADER username=\"$USERNAME\""
fi

#header - preffered method ----------------------------------------------------
DPKGEXEC=`which dpkg 2>/dev/null`
if [ "x$DPKGEXEC" != "x"  ]; then
        MANAGERS="$MANAGERSdpkg:OK "
        PREFFERED_MANAGER="dpkg"
else
        MANAGERS="$MANAGERS dpkg:failed "
fi
APTITUDEEXEC=`which aptitude 2>/dev/null`
if [ "x$APTITUDEEXEC" != "x"  ]; then
        MANAGERS="$MANAGERSaptitude:OK "
        PREFFERED_MANAGER="aptitude"
else
        MANAGERS="$MANAGERS aptitude:failed "
fi
YUMEXEC=`which yum 2>/dev/null`
if [ "x$YUMEXEC" != "x"  ]; then
        MANAGERS="$MANAGERSyum:OK "
		if echo $SYSTEMNAME | grep -q -i -e "\(ubuntu\|debian\).*" ; then
			log "Don't use yum on deb based distros"
		else
			PREFFERED_MANAGER="yum"
		fi
else
        MANAGERS="$MANAGERS yum:failed "
fi

if [ "x$PREFFERED_MANAGER" = "x" ]; then
	echo "not found supported package manager"
    exit 1
fi
MANAGERS="$MANAGERS preffered=$PREFFERED_MANAGER"

if [ $cmd_show = 1 -a $group_sysinfo = 1 ]; then
        echo "type=$OSTYPE"
        echo "systemname=$SYSTEMNAME"
        echo "arch=$OSARCH"
        echo "info=$OSINFO"
        echo "hostname=$HOSTNAME"
        echo "username=$USERNAME"
        echo "MANAGERS=$MANAGERS"
        echo "commnet=$COMMENT_FIELD"
fi
}

PackagesRequests() {
XML_HEADER="$XML_HEADER pkgmanager=\"$PREFFERED_MANAGER\" xmlenv=\"$VERSION\" comment=\"$COMMENT_FIELD\">"
if [ $cmd_dump = 1 -o  $cmd_backup = 1 ]; then
	echo $XML_HEADER_START > $XML_VERSIONS_FILE
	echo $XML_HEADER >> $XML_VERSIONS_FILE
fi

#HW INFO ------------------------------------------------------------------------------
if [ "$group_hwinfo" = "1" ]; then
	CPU_NAME=`cat /proc/cpuinfo | grep "model name" -m 1  | awk -F ': ' '{print $2}'`
	CPU_ARCH=`lscpu | grep "Architecture". | awk -F' '  '{print $2}'`
	CPU_CORES=` cat /proc/cpuinfo | grep 'core id' 2> /dev/null | wc -l`
  	CPU_VT_FLAGS=` cat /proc/cpuinfo |grep -Eho -m 1 -i "svm|vmx"`
	MEMORY_TOTAL=`free -m | grep "Mem:" |  awk -F' '  '{print $2}'`
	SWAP_TOTAL=`free -m | grep "Swap:" |  awk -F' '  '{print $2}'`
	DISK_ROOT_INFO=`df / -BG -T | tail -1`
	DISK_ROOT_TOTAL=`echo $DISK_ROOT_INFO | awk ' {print $3}'`
	DISK_ROOT_FREE=`echo $DISK_ROOT_INFO | awk ' {print $5}'`
	DISK_ROOT_TYPE=`echo $DISK_ROOT_INFO | awk ' {print $2}'`
	DISK_HOME_INFO=`df ~ -BG -T | tail -1`
	DISK_HOME_TOTAL=`echo $DISK_HOME_INFO | awk ' {print $3}'`
	DISK_HOME_FREE=`echo $DISK_HOME_INFO | awk ' {print $5}'`
	DISK_HOME_TYPE=`echo $DISK_HOME_INFO | awk ' {print $2}'`

	if [ $cmd_show = 1 ]; then
		echo "cpu-name=$CPU_NAME"
		echo "cpu-arch=$CPU_ARCH"
		echo "cpu-cores=$CPU_CORES"
		echo "cpu-vt-flags=$CPU_VT_FLAGS"
		echo "memory-total=$MEMORY_TOTAL"
		echo "swap-total=$SWAP_TOTAL"
		echo "disk-root: total=$DISK_ROOT_TOTAL free=$DISK_ROOT_FREE type=$DISK_ROOT_TYPE"
		echo "disk-home: total=$DISK_HOME_TOTAL free=$DISK_HOME_FREE type=$DISK_HOME_TYPE"
	fi
	if [ $cmd_dump = 1 -o  $cmd_backup = 1 ]; then
		echo "<hw>" >> $XML_VERSIONS_FILE
		echo "  <cpu name=\"$CPU_NAME\" arch=\"$CPU_ARCH\" cores=\"$CPU_CORES\" vt-flags=\"$CPU_VT_FLAGS\" />" >>  $XML_VERSIONS_FILE
		echo "  <memory total=\"$MEMORY_TOTAL\" />" >>  $XML_VERSIONS_FILE
		echo "  <swap total=\"$SWAP_TOTAL\" />" >>  $XML_VERSIONS_FILE
		echo "  <disk-root total=\"$DISK_ROOT_TOTAL\" free=\"$DISK_ROOT_FREE\" type=\"$DISK_ROOT_TYPE\" />" >>  $XML_VERSIONS_FILE
		echo "  <disk-home total=\"$DISK_HOME_TOTAL\" free=\"$DISK_HOME_FREE\" type=\"$DISK_ROOT_TYPE\" />" >>  $XML_VERSIONS_FILE
		echo "</hw>" >> $XML_VERSIONS_FILE
	fi
fi

#envvars ------------------------------------------------------------------------------
if [ $group_envvar = 1 ]; then
	if [ $cmd_show = 1 ]; then
		env | tr -d \"\'\|\%\\\\  | sort -V -s -u |  awk -F= ' { print $1 "=" $2 }'
	fi
	if [ $cmd_dump = 1 -o  $cmd_backup = 1 ]; then
		echo "<envvars>" >> $XML_VERSIONS_FILE
		env | tr -d \"\'\|\%\\\\  | sort -V -s -u | awk -F= ' { print "  <envvar name=\""$1"\" value=\""$2"\" />" }' >>  $XML_VERSIONS_FILE
		echo "</envvars>" >> $XML_VERSIONS_FILE
	fi
fi

#packages ------------------------------------------------------------------------------
if [ "x$PREFFERED_MANAGER" = "xaptitude" ]; then
        #curently only for apt
	if [ $cmd_dump = 1 -o  $cmd_backup = 1 ]; then
		if [ "$group_descr" = "1" ]; then
			echo $XML_HEADER_START > $XML_DESCRIPTIONS_FILE
			echo $XML_HEADER >> $XML_DESCRIPTIONS_FILE
			aptitude -F '%p %m %d' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print "  <package name=\""$1"\" mainteiner=\"" $2 "\" description=\""  substr($0, index($0,$3)) "\" />" }' >> $XML_DESCRIPTIONS_FILE		
			echo "</system>" >> $XML_DESCRIPTIONS_FILE
		fi

		if [ "$group_pkgver" = "1" ]; then
			echo "<packages>" >> $XML_VERSIONS_FILE
			aptitude -F '%p %v %p' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print "  <package name=\""$1"\" version=\""$2"\" fullpackagename=\""$3"\"/>" }' >>  $XML_VERSIONS_FILE	
			echo "</packages>" >> $XML_VERSIONS_FILE
		elif [ "$group_pkglist" = "1" ]; then #simple list
			echo "<packages>" >> $XML_VERSIONS_FILE
			aptitude -F '%p' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print "  <package name=\""$1"\"/>" }' >>  $XML_VERSIONS_FILE	
			echo "</packages>" >> $XML_VERSIONS_FILE
		fi
	fi

	if [ "$cmd_show" = "1" ]; then
		if [ "$group_pkgver" = "1" ]; then
			aptitude -F '%p %v %p' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print $1 " " $2 }'
		elif [ "$group_pkglist" = "1" ]; then #simple list
			aptitude -F '%p' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print $1}'
                fi
		if [ "$group_pkgcount" = "1" ]; then
			COUNT=`aptitude -F '%p' search '~i' --disable-columns| wc -l`
			echo "installed $COUNT packages"
		fi
	fi

	if [ "$cmd_check" = "1" ]; then
		if [ "$group_pkgver" = "1" ]; then
			echo "todo: check versions"
		elif [ "$group_pkglist" = "1" ]; then #simple list
			INSTALLED=`aptitude -F '%p' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print $1}'`
			for PKGNAME in $DATA_LIST
			do
                FOUND=0
			    for CHECK in $INSTALLED
			    do
                     if [ "x$CHECK" = "x$PKGNAME" ]; then
	                     FOUND=1
				         echo "$PKGNAME installed - OK"
                     fi
			    done
                if [ $FOUND -eq 0 ]; then
                     echo "$PKGNAME not installed - exit 1"
                     exit 1
                fi
			done
        fi
	fi
fi
if [ "x$PREFFERED_MANAGER" = "xdpkg" ]; then
	if [ $cmd_dump = 1 -o  $cmd_backup = 1 ]; then
		if [ "$group_descr" = "1" ]; then
			echo $XML_HEADER_START > $XML_DESCRIPTIONS_FILE
			echo $XML_HEADER >> $XML_DESCRIPTIONS_FILE
			dpkg-query -W -f='${PackageSpec} ${Description}\n' | tr \" \' | tr -d \&\<\> | awk '/^ii/ {print "  <package name=\""$2"\" description=\""  substr($0, index($0,$4)) "\" />"  }' >> $XML_DESCRIPTIONS_FILE
			echo "</system>" >> $XML_DESCRIPTIONS_FILE
		fi
		if [ "$group_pkgver" = "1" ]; then
			echo "<packages>" >> $XML_VERSIONS_FILE
			dpkg -l | awk '/^ii/ {print "\t<package name=\"" $2 "\" version=\""$3 "\" />"}' >>  $XML_VERSIONS_FILE
			echo "</packages>" >> $XML_VERSIONS_FILE
		elif [ "$group_pkglist" = "1" ]; then #simple list
			echo "<packages>" >> $XML_VERSIONS_FILE
			dpkg -l | awk '/^ii/ {print "\t<package name=\"" $2 "\" />"}' >>  $XML_VERSIONS_FILE
			echo "</packages>" >> $XML_VERSIONS_FILE
		fi
 	fi
	if [ "$cmd_show" = "1" ]; then
		if [ "$group_pkgver" = "1" ]; then
			dpkg -l | awk '/^ii/ {print $2, $3}'
		elif [ "$group_pkglist" = "1" ]; then #simple list
			dpkg -l | awk '/^ii/ {print $2}'
        fi
		if [ "$group_pkgcount" = "1" ]; then
			COUNT=`dpkg -l | awk '/^ii/ {print $2}'| wc -l`
 			echo "installed $COUNT packages"
		fi
	fi
	if [ "$cmd_check" = "1" ]; then
		if [ "$group_pkgver" = "1" ]; then
			echo "todo: check versions" #dpkg -l | awk '/^ii/ {print $2, $3}'
		elif [ "$group_pkglist" = "1" ]; then #simple list
			INSTALLED=`dpkg -l | awk '/^ii/ {print $2}'`
			for PKGNAME in $DATA_LIST
			do
                FOUND=0
			    for CHECK in $INSTALLED
			    do
                    if [ "x$CHECK" = "x$PKGNAME" ]; then
	                    FOUND=1
				        echo "$PKGNAME installed - OK"
                    fi
			    done
                if [ $FOUND -eq 0 ]; then
                    echo "$PKGNAME not installed - exit 1" 
                    exit 1
                fi
			done
        fi
	fi
fi

#rpm -qa
#rpm -qa | while read package; do rpm -qi $package | head -n 1 | while read a b c; do echo -n "$c "; done; rpm -qi $package | head -n 2 | tail -n 1 | while read a b c; do echo $c; done; done
#yum
if [ "x$PREFFERED_MANAGER" = "xyum" ]; then
	#packages
	if [ $cmd_dump = 1 -o  $cmd_backup = 1 ]; then
		echo "<packages>" >> $XML_VERSIONS_FILE
		yum list installed | tr \" \' | tr -d \&\<\> | awk '{print "  <package name=\"" $1 "\" version=\""$2 "\" />" }' >>  $XML_VERSIONS_FILE	
       	echo "</packages>" >> $XML_VERSIONS_FILE
	fi

	if [ "$cmd_show" = "1" ]; then
		if [ "$group_pkgver" = "1" ]; then
			 yum list installed | tr \" \' | tr -d \&\<\> | awk '{print "$1 " "$2" }'
		elif [ "$group_pkglist" = "1" ]; then #simple list
			 yum list installed | tr \" \' | tr -d \&\<\> | awk '{print "$1"}'
        fi
    fi

	if [ "$group_pkgcount" = "1" ]; then
		COUNT=`yum list installed| wc -l`
		echo "installed $COUNT packages"
	fi

	if [ "$cmd_check" = "1" ]; then
		if [ "$group_pkgver" = "1" ]; then
			echo "todo: check versions"
		elif [ "$group_pkglist" = "1" ]; then #simple list
			INSTALLED=`aptitude -F '%p' search '~i' --disable-columns | tr \" \' | tr -d \&\<\> | awk '{print $1}'`
			for PKGNAME in $DATA_LIST
			do
                FOUND=0
			    for CHECK in $INSTALLED
			    do
                    if [ "x$CHECK" = "x$PKGNAME" ]; then
	                    FOUND=1
				        echo "$PKGNAME installed - OK" 
                    fi
			    done
                if [ $FOUND -eq 0 ]; then
                    echo "$PKGNAME not installed - exit 1" 
                    exit 1
                fi
			done
        fi
	fi
fi

#footer
if [ $cmd_dump = 1 -o $cmd_backup = 1 ]; then
	echo "</system>" >> $XML_VERSIONS_FILE
fi
}


interactive=
base_xml=
output_html=`pwd`/result.html
full_html_report=false
dont_dump=0
exit_codes=false
cmd_show=0
cmd_dump=0
cmd_backup=0
cmd_compare_report=0
cmd_compare_installed_pkgs=0
cmd_compare_removed_pkgs=0
cmd_check=0
group_pkglist=0
group_pkgver=0
group_hwinfo=0
group_sysinfo=0
group_descr=0
group_envvar=0
group_pkgcount=0
DATA_LIST=
log(){ [ ${VERBOSE_FLAG:-0} -eq 0 ] || echo "V: $*" ; }
fail() { printf "\n\033[01;31mERROR: $*\033[00m\n" ; exit 1 ; }

while [ "$1" != "" ]; do
    case $1 in
        show)                   cmd_show=1 ;;
        dump)                   cmd_dump=1 ;;
        backup)                 cmd_backup=1 ;;
        compare-report)         cmd_compare_report=1 ;;
        compare-installed-pkgs) cmd_compare_installed_pkgs=1 ;;
        compare-removed-pkgs)   cmd_compare_removed_pkgs=1 ;;
        check)                  cmd_check=1 ;;
        all)                    group_pkglist=1
                				group_pkgver=1
								group_hwinfo=1
		                        group_sysinfo=1
                				group_envvar=1 ;;
        list|pkglist)           group_pkglist=1 ;;
        versions|pkgver)        group_pkgver=1 ;;
        sysinfo|system|sys)     group_sysinfo=1 ;;
        hwinfo|hw)              group_hwinfo=1 ;;
        descr|pkgdescr|descriptions)  group_descr=1 ;;   #special usage
        env|envvar)             group_envvar=1 ;;
        count|pkgcount)         group_pkgcount=1 ;;
        -b|--base-xml)          shift
                                base_xml=`readlink -f $1`
								[ -f $base_xml ] || fail "Base file $base_xml does not exists"
                                ;;
        -r|--output-report)     shift
                                output_html=$1 ;;
        -x|--xml|--output-xml)  shift
                                XML_VERSIONS_FILE=$1 ; XMLFILE_FROM_ARG=1 ;;
        -od|--output-descriptions)      shift
                                XML_DESCRIPTIONS_FILE=$1 ;;
        -f|--full)              full_html_report=true;;
		-dd|--dont-dump)        dont_dump=1 ;;
        -ec|--exitcode)         exit_codes=true;;
        -c|--comment)           shift
                                COMMENT_FIELD="$1" ;;
        help|-h|--help )        usage exit ;;
        -v|--verbose )          VERBOSE_FLAG=1 ;;
        -V|--version)           echo "`basename $0` $VERSION ${VERSION_DATE}" ; exit 0 ;;
        *)                      DATA_LIST=`echo $1 | tr "," "\n"` ;;

    esac
    shift
done
#cmd_run=$(($cmd_show+$cmd_dump))
#xmlver show (means all)
if [ "$group_pkglist" = "0" -a "$group_pkgver" = "0" -a "$group_hwinfo" = "0" -a "$group_sysinfo" = "0" -a "$group_descr" = "0"  -a "$group_envvar" = "0" -a "$group_pkgcount" = "0"  ]; then
	group_pkglist=1
	group_pkgver=1
	group_hwinfo=1
	group_sysinfo=1
    group_envvar=1
	group_pkgcount=1
fi
log "show=$cmd_show dump=$cmd_dump backup=$cmd_backup compare_report=$cmd_compare_report check=$cmd_check"
log "pkglist=$group_pkglist pkgver=$group_pkgver envvar=$group_envvar pkgcount=$group_pkgcount desc=$group_descr"
if [ $cmd_show = 1 -o $cmd_dump = 1 -o $cmd_backup = 1 ]; then
	log "running show, dump or backup"

	#special case to count packages from file
	if [ "$group_pkgcount" = "1" -a -n "$XMLFILE_FROM_ARG" ]; then
		[ -f $XML_VERSIONS_FILE ] || fail "Input xml file $XML_VERSIONS_FILE does not exist"
		COUNT=`grep "\<package " $XML_VERSIONS_FILE | wc -l`
		echo "installed $COUNT packages"
		exit 0
	fi

	if [ $cmd_backup = 1 ]; then
	    test -e $XMLENV_BACKUP_DIR ||  mkdir $XMLENV_BACKUP_DIR
        XML_VERSIONS_FILE=$XMLENV_BACKUP_DIR/pkgversions-$TS.xml
        XML_DESCRIPTIONS_FILE=$XMLENV_BACKUP_DIR/pkgdescriptions-$TS.xml
        echo "backup will be stored in:$XML_VERSIONS_FILE"
    fi
	Init
	if [ $group_pkglist = 1 -o $group_pkgver = 1 -o $group_hwinfo = 1 -o $group_envvar = 1 -o $group_pkgcount = 1 -o $group_descr = 1 ]; then
		PackagesRequests
	fi
elif [ $cmd_compare_report = 1 -o $cmd_compare_installed_pkgs = 1 -o $cmd_compare_removed_pkgs = 1 ]; then
    #simple compare(base.xml) or dump+compare
    log "running compare"
	#TODO - hwinfo comparations?
    cmd_dump=1 ; group_pkgver=1 ; group_sysinfo=1 ;
	if [ $dont_dump = 1 ]; then
		[ -f $XML_VERSIONS_FILE ] || fail "Input xml file $XML_VERSIONS_FILE does not exist"
	else
	    Init
    	PackagesRequests
	fi
	if [ $cmd_compare_report = 1 ]; then
		[ -f $base_xml ] || fail "Base file $base_xml does not exists"
	    saxon-xslt $XML_VERSIONS_FILE /usr/share/xmlenv/compare-pkgs.xsl basefile=$base_xml fullreport=$full_html_report > $output_html
		if [ "$?" != "0" ]; then
		echo "problem in comparation - maybe libsaxon-java is not installed or you don't have permissions."
		    exit 1
		else
			#0 = found not installed package
			grep "not installed" -q $output_html
			if [ "$?" = "0" -a "$exit_codes" = "true" ]; then
				echo "some packages are not installed check `readlink -f $output_html`"
				exit 1
			else
				echo "comparation result written to `readlink -f $output_html`"
			fi
		fi
	elif [ $cmd_compare_installed_pkgs = 1 ]; then
		echo "Extra installed packages:"
		#empty base flag means to compare with empty document
		[ -n "$base_xml" ] && BASE_FLAG="basefile=$base_xml"
		saxon-xslt $XML_VERSIONS_FILE /usr/share/xmlenv/pkglist-extra-installed.xsl $BASE_FLAG
	elif [ $cmd_compare_removed_pkgs = 1 ]; then
		[ -f $base_xml ] || fail "Base file $base_xml does not exists"
		echo "Removed packages:"
		XML_VERSIONS_FILE=`readlink -f $XML_VERSIONS_FILE`
		saxon-xslt $base_xml /usr/share/xmlenv/pkglist-extra-installed.xsl basefile=$XML_VERSIONS_FILE 
	fi
elif [ $cmd_check = 1  ]; then
	log "running check"
	Init #todo maybe separate manager check
	if [ $group_pkglist = 1 -o $group_pkgver = 1 -o $group_envvar = 1 ]; then
		PackagesRequests
	fi
else
   	echo "wrong parameters"
    usage
fi

